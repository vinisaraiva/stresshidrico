import streamlit as st
import pandas as pd
import plotly.express as px
import json

# --- Configura√ß√£o da p√°gina ---
st.set_page_config(
    page_title="Extra√ß√£o H√≠drica Per Capita Anual",
    layout="wide"
)

st.title("üíß Extra√ß√£o H√≠drica Per Capita Anual por Estado")
st.markdown(
    """
    Este painel mostra a **extra√ß√£o h√≠drica per capita anual** (m¬≥ por habitante por ano)
    nas Unidades Federativas do Brasil, com base nos dados de extra√ß√£o de √°gua (m¬≥/s) do SNIRH/ANA
    e popula√ß√£o (IBGE). Use os filtros para explorar por ano, regi√£o e visualizar os Top-N estados.
    """
)

# --- Carregamento de dados ---
@st.cache_data
def load_data():
    # Leitura do CSV de extra√ß√£o (m¬≥/s)
    df = pd.read_csv("uso-agua-estado.csv")
    df = df.rename(columns={
        "SGEST":    "UF",
        "NMEST":    "state_name",
        "VZTOTM3S": "flow_m3s",
        "ANO":      "year"
    })
    # Converter fluxo (m¬≥/s) em volume anual (m¬≥)
    seconds_per_year = 365 * 24 * 3600
    df["extraction_annual_m3"] = df["flow_m3s"] * seconds_per_year

    # Leitura do CSV de popula√ß√£o
    df_pop = pd.read_csv("populacao_uf.csv")  # colunas: UF, populacao
    df = df.merge(df_pop, on="UF", how="left")

    # C√°lculo da extra√ß√£o per capita (m¬≥ por habitante/ano)
    df["extraction_per_capita"] = df["extraction_annual_m3"] / df["populacao"]

    # Mapeamento de regi√µes brasileiras
    region_map = {
        'RO':'Norte','AC':'Norte','AM':'Norte','RR':'Norte','PA':'Norte','AP':'Norte','TO':'Norte',
        'MA':'Nordeste','PI':'Nordeste','CE':'Nordeste','RN':'Nordeste','PB':'Nordeste','PE':'Nordeste','AL':'Nordeste','SE':'Nordeste','BA':'Nordeste',
        'MG':'Sudeste','ES':'Sudeste','RJ':'Sudeste','SP':'Sudeste',
        'PR':'Sul','SC':'Sul','RS':'Sul',
        'MT':'Centro-Oeste','MS':'Centro-Oeste','GO':'Centro-Oeste','DF':'Centro-Oeste'
    }
    df['region'] = df['UF'].map(region_map)
    return df

@st.cache_data
def load_geojson():
    # Carrega o GeoJSON local para as fronteiras dos estados
    with open("brazil_states.geojson", "r", encoding="utf-8") as f:
        return json.load(f)

# --- Dados e geometrias ---
df = load_data()
geo = load_geojson()

# --- Fun√ß√£o principal ---
def main():
    # Sidebar de filtros
    st.sidebar.header("Filtros")
    years = sorted(df['year'].unique())
    selected_year = st.sidebar.selectbox("Ano de Extra√ß√£o", years, index=len(years)-1)
    regions = sorted(df['region'].dropna().unique())
    selected_regions = st.sidebar.multiselect("Regi√µes", regions, default=regions)
    max_states = df['state_name'].nunique()
    top_n = st.sidebar.slider("Top-N Estados", 1, max_states, min(10, max_states))

    # Aplicar filtros
    df_sel = df[(df['year'] == selected_year) & (df['region'].isin(selected_regions))]
    df_sel = df_sel.dropna(subset=['extraction_per_capita'])
    df_top = df_sel.sort_values('extraction_per_capita', ascending=False).head(top_n)

    # --- Mapa coropl√©tico ---
    fig_map = px.choropleth(
        df_sel,
        geojson=geo,
        locations='state_name',
        featureidkey='properties.Estado',
        color='extraction_per_capita',
        color_continuous_scale='Blues',
        projection='mercator',
        title=f"Extra√ß√£o H√≠drica Per Capita Anual ‚Äì {selected_year}",
        labels={'extraction_per_capita':'m¬≥ por hab¬∑ano'},
        hover_data={'extraction_per_capita':':,.0f'}
    )
    fig_map.update_traces(marker_line_color='black', marker_line_width=1)
    fig_map.update_geos(fitbounds='locations', visible=False)
    fig_map.update_layout(margin=dict(l=0, r=0, t=50, b=0), height=600)

    # --- Gr√°fico de barras ---
    fig_bar = px.bar(
        df_top,
        x='extraction_per_capita',
        y='state_name',
        orientation='h',
        title=f"Top {top_n} Estados ‚Äì Extra√ß√£o Per Capita",
        labels={'state_name':'Estado', 'extraction_per_capita':'m¬≥ por hab¬∑ano'},
        text=df_top['extraction_per_capita'].round(0)
    )
    fig_bar.update_traces(textposition='outside')
    fig_bar.update_layout(yaxis=dict(dtick=1), margin=dict(l=140, r=40, t=60, b=40), height=600)

    # --- Layout de colunas ---
    col1, col2 = st.columns([4, 3])
    with col1:
        st.plotly_chart(fig_map, use_container_width=True)
    with col2:
        st.plotly_chart(fig_bar, use_container_width=True)

    # --- Rodap√© ---
    st.markdown('---')
    st.markdown(
        """
        **Fontes (APA):**  
        Ag√™ncia Nacional de √Åguas ‚Äì SNIRH. (2021). Uso da √°gua por estado (m¬≥/s). Dados Abertos ANA.  
        Instituto Brasileiro de Geografia e Estat√≠stica. (2021). Popula√ß√£o estimada por unidade da federa√ß√£o. SIDRA IBGE.  
        """
    )

if __name__ == '__main__':
    main()